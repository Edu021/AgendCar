<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Serviços de Estética Automotiva</title>
    <style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    min-height: 100vh;
    background: linear-gradient(to bottom, #012733, #2d2d2d);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}
 
/* Navegação */
.nav-bar {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    position: fixed;
    width: 100%;
    height: 70px;
    z-index: 1000;
    padding: 1rem 0;
    justify-content: center;
    align-items: center;
}

.nav-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-logo {
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
    text-decoration: none;
}

.nav-links {
    display: flex;
    gap: 2rem;
}

.nav-link {
    color: white;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: #0d404f;
}

.sidebar {
    position: fixed;
    border: 3px solid #0d404f;
    top: 0;
    right: -400px;
    width: 400px;
    height: 100vh;
    background: white;
    box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
    transition: right 0.3s ease;
    z-index: 1000;
    overflow-y: auto;
    padding: 20px;
}

.sidebar.visible {
    right: 0;
}

.close-btn {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
    }

.profile-content {
    padding-top: 20px;
    }

.profile-header {
    text-align: center;
     margin-bottom: 30px;
}

.profile-avatar {
    width: 100px;
    height: 100px;
    background: #f0f0f0;
    border-radius: 50%;
    margin: 0 auto 15px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.profile-info {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    position: relative;
}

.profile-info p {
    margin: 10px 0;
    display: flex;
    align-items: center;
}

.profile-info p svg {
    margin-right: 10px;
}

.edit-profile-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    cursor: pointer;
    color: #4a5568;
    padding: 5px;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.edit-profile-btn:hover {
    background-color: #e2e8f0;
}

.vehicles-section {
    margin-bottom: 30px;
}

.vehicle-card {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    position: relative;
}

.vehicle-card h4 {
    margin: 0 0 10px 0;
    color: #333;
    padding-right: 30px;
}

.vehicle-info {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
}

.vehicle-info p {
    margin: 5px 0;
    font-size: 14px;
}

.edit-vehicle-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    cursor: pointer;
    color: #0d404f;
    padding: 5px;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.edit-vehicle-btn:hover {
    background-color: #e2e8f0;
}

.logout-btn {
    width: 100%;
    padding: 15px;
    background: #fff;
    color: #0d404f;
    border: 1px solid #0d404f;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.3s ease;
        }

.logout-btn:hover {
    background: #0d404f;
    color: #fff;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 2000;
}

.modal-content {
    position: relative;
    background-color: white;
    margin: 10vh auto;
    padding: 25px;
    width: 90%;
    max-width: 500px;
    border-radius: 8px;
    max-height: 80vh;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
}

.modal-content h2 {
    text-align: center;
    margin-bottom: 20px;
    color: #333;
}

#editProfileForm, #editVehicleForm {
    display: flex;
    flex-direction: column;
    width: 100%;
}

.modal-close {
    position: absolute;
    right: 10px;
    top: 10px;
    font-size: 24px;
    cursor: pointer;
    background: none;
    border: none;
    color: #666;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.form-group input,
.form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.save-btn {
    background: #2563eb;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
    margin-top: 15px;
    width: 100%;
}

.save-btn:hover {
    background: #1d4ed8;
}

.hero {
    height: 400px;
    background-image: url('https://images.unsplash.com/photo-1600706432502-77a0e2e32795?auto=format&fit=crop&q=80');
    background-size: cover;
    background-position: center;
    position: relative;
}

.hero-overlay {
    position: absolute;
    inset: 0;
    background: rgb(0,0,0);
    background: linear-gradient(264deg, rgba(0,0,0,1) 0%, rgba(13,64,79,0.7371323529411764) 74%, rgba(187,194,195,1) 100%);
    display: flex;
    align-items: center;
}

.hero-content {
    color: white;
}

.hero h1 {
    font-size: 3rem;
    font-weight: bold;
    margin-bottom: 1rem;
}

.hero .subtitle {
    font-size: 1.25rem;
    margin-bottom: 1.5rem;
}

.feature {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 0.5rem;
}

.icon-star, .icon-timer {
    color: #fbbf24;
}

/* Services Section */
.services {
    padding: 4rem 0;
}

.services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
}

.service-card {
    background: white;
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px #0d404f;
    transition: transform 0.3s ease;
}

.service-card:hover {
    transform: scale(1.05);
}

.service-icon {
    color: #0d404f;
    margin-bottom: 1rem;
}

.service-card h3 {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.service-card p {
    color: #666;
    margin-bottom: 1rem;
}

.price {
    font-size: 1.5rem;
    font-weight: bold;
    color: #0d404f !important;
    margin: 1rem 0;
}

/* CTA Section */
.cta {
    background: rgb(0,0,0);
    background: linear-gradient(264deg, rgba(0,0,0,1) 0%, rgba(13,64,79,0.7371323529411764) 74%, rgba(187,194,195,1) 100%);
    color: white;
    padding: 4rem 0;
    text-align: center;
}

.cta h2 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 1rem;
}

.cta p {
    font-size: 1.25rem;
    margin-bottom: 2rem;
}

/* Buttons */
.btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.5rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 100%;
    background-color: transparent;
    color:#0d404f;
    border: 1px solid #0d404f;
}

.btn:hover {
    background-color: #0d404f;
    color: #fff;
}

.btn-white {
    background-color: transparent;
    color: #fff;
    padding: 1rem 2rem;
    font-size: 1.125rem;
    border: 1px solid #fff;
}

.btn-white:hover {
    background-color: #f8f9fa;
    color: #0d404f;
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero h1 {
        font-size: 2.5rem;
    }

    .services-grid {
        grid-template-columns: 1fr;
    }

    .cta h2 {
        font-size: 1.75rem;
    }
}

.form-static-text {
    padding: 8px 0;
    font-size: 16px;
    color: #555;
    border-bottom: 1px solid #eee;
}
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="nav-bar">
        <div class="container">
            <div class="nav-content">
                <a href="<%= service_path %>" class="nav-logo">AgendCar</a>
                <div class="nav-links">
                    <a href="<%= service_path %>" class="nav-link">Início</a>
                    <a href="<%= car_path %>" class="nav-link">Cadastrar Veículo</a>
                    <a class="nav-link" id="profileLink" href="#">Perfil</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Enhanced Sidebar -->
    <div id="sidebar" class="sidebar">
        <button id="closeSidebar" class="close-btn">&times;</button>
        <div class="profile-content">
            <div class="profile-header">
                <div class="profile-avatar">
                    <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                    </svg>
                </div>
                <h2>Meu Perfil</h2>
            </div>

            <div class="profile-info">
                <button class="edit-profile-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
                </button>
                <p>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                    </svg>
                    <strong>Nome:</strong> <span id="userName"><% if current_user %><%= current_user.nome %><% else %>Nome não disponível<% end %></span>
                </p>
                <p>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 2L11 13"></path>
                        <path d="M22 2L15 22L11 13L2 9L22 2Z"></path>
                    </svg>
                    <strong>Email:</strong> <span id="userEmail"><% if current_user %><%= current_user.email %><% else %>Email não disponível<% end %></span>
                </p>
                <p>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                    </svg>
                    <strong>Telefone:</strong> <span id="userPhone"><% if current_user && current_user.telefone.present? %><%= current_user.telefone %><% else %>Telefone não disponível<% end %></span>
                </p>
            </div>

            <div class="vehicles-section">
                <h3>Meus Veículos</h3>
                <div id="vehiclesList">
                    <!-- Vehicles will be added here dynamically -->
                </div>
            </div>

            <button id="logoutBtn" class="logout-btn">Desconectar</button>
        </div>
    </div>

    <!-- Edit Profile Modal -->
    <div id="editProfileModal" class="modal">
        <div class="modal-content">
            <button class="modal-close">&times;</button>
            <h2>Editar Perfil</h2>
            <form id="editProfileForm">
                <div class="form-group">
                    <label for="staticName">Nome</label>
                    <p id="staticName" class="form-static-text"><%= current_user&.nome %></p>
                </div>
                <div class="form-group">
                    <label for="staticEmail">Email</label>
                    <p id="staticEmail" class="form-static-text"><%= current_user&.email %></p>
                </div>
                <div class="form-group">
                    <label for="editPhone">Telefone</label>
                    <input type="tel" id="editPhone" name="client[telefone]" required>
                </div>
                <button type="submit" class="save-btn">Salvar Alterações</button>
            </form>
        </div>
    </div>

    <!-- Edit Vehicle Modal -->
    <div id="editVehicleModal" class="modal">
        <div class="modal-content">
            <button class="modal-close">&times;</button>
            <h2>Editar Veículo</h2>
            <form id="editVehicleForm">
                <input type="hidden" id="editVehicleId">
                <div class="form-group">
                    <label for="editPlaca">Placa</label>
                    <input type="text" id="editPlaca" required pattern="[A-Za-z]{3}[0-9][A-Za-z0-9][0-9]{2}" maxlength="7">
                </div>
                <div class="form-group">
                    <label for="editMarca">Marca</label>
                    <input type="text" id="editMarca" required>
                </div>
                <div class="form-group">
                    <label for="editModelo">Modelo</label>
                    <input type="text" id="editModelo" required>
                </div>
                <div class="form-group">
                    <label for="editTipo">Tipo</label>
                    <select id="editTipo" required>
                        <option value="Hatch">Hatch</option>
                        <option value="Sedan">Sedan</option>
                        <option value="SUV">SUV</option>
                        <option value="Pickup">Pickup</option>
                        <option value="Van">Van</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editCor">Cor</label>
                    <input type="text" id="editCor" required>
                </div>
                <button type="submit" class="save-btn">Salvar Alterações</button>
            </form>
        </div>
    </div>

    <!-- Hero Section -->
    <div class="hero">
        <div class="hero-overlay">
            <div class="container">
                <div class="hero-content">

                    <h1>Serviços de Estética Automotiva</h1>
                    <p class="subtitle">Cuidamos do seu veículo com excelência e profissionalismo</p>
                    <div class="feature">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-star">
                            <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                        </svg>
                        <span>Mais de 1000 clientes satisfeitos</span>
                    </div>
                    <div class="feature">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-timer">
                            <circle cx="12" cy="12" r="10"></circle>
                            <polyline points="12 6 12 12 16 14"></polyline>
                        </svg>
                        <span>Atendimento rápido e profissional</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Services Section -->
    <div class="services container">
        <div class="services-grid">
            <div class="service-card">
                <div class="service-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.4 16 9 16 9s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7h-2.3c-.7 0-1.4.3-1.9.8L6 8.5V13h0c0 1.1.9 2 2 2h1.5"></path>
                        <path d="M9 17h1"></path>
                        <path d="M17 17h1"></path>
                        <path d="M5 11h3"></path>
                        <circle cx="7.5" cy="17.5" r="2.5"></circle>
                        <circle cx="16.5" cy="17.5" r="2.5"></circle>
                    </svg>
                </div>
                <h3>Lavagem Completa</h3>
                <p>Limpeza completa interna e externa do seu veículo com produtos premium.</p>
                <p class="price">R$ 150,00</p>
                <button class="btn">Agendar</button>
            </div>

            <div class="service-card">
                <div class="service-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 20a8 8 0 0 0 8-8"></path>
                        <path d="M12 12v8"></path>
                        <path d="M12 12a8 8 0 0 1-8-8"></path>
                        <path d="M12 4v8"></path>
                        <path d="m9 12 3-3 3 3"></path>
                    </svg>
                </div>
                <h3>Polimento</h3>
                <p>Polimento profissional para remover riscos e restaurar o brilho da pintura.</p>
                <p class="price">R$ 280,00</p>
                <button class="btn">Agendar</button>
            </div>

            <div class="service-card">
                <div class="service-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10"></path>
                    </svg>
                </div>
                <h3>Cristalização</h3>
                <p>Proteção duradoura que mantém seu carro brilhando por mais tempo.</p>
                <p class="price">R$ 400,00</p>
                <button class="btn">Agendar</button>
            </div>

            <div class="service-card">
                <div class="service-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
                    </svg>
                </div>
                <h3>Higienização</h3>
                <p>Limpeza profunda de estofados e ar condicionado.</p>
                <p class="price">R$ 200,00</p>
                <button class="btn">Agendar</button>
            </div>
        </div>
    </div>

    <!-- CTA Section -->
    <div class="cta">
        <div class="container">
            <h2>Agende seu horário hoje mesmo!</h2>
            <p>Oferecemos os melhores serviços de estética automotiva da região</p>
            <button class="btn btn-white">Contate-nos</button>
        </div>
    </div>

    <script>
        // Mock data for vehicles (in a real application, this would come from a database)
        /* Remove mock data
        const userVehicles = [
            {
                placa: 'ABC1D23',
                marca: 'Volkswagen',
                modelo: 'Golf',
                tipo: 'Hatch',
                cor: 'Preto'
            },
            {
                placa: 'XYZ4W56',
                marca: 'Toyota',
                modelo: 'Corolla',
                tipo: 'Sedan',
                cor: 'Prata'
            }
        ];
        */

        // Function to create vehicle cards
        function createVehicleCards(vehiclesData) {
            const vehiclesList = document.getElementById('vehiclesList');
            vehiclesList.innerHTML = ''; // Clear existing content

            if (!vehiclesData || vehiclesData.length === 0) {
                vehiclesList.innerHTML = '<p>Nenhum veículo cadastrado.</p>';
                return;
            }

            vehiclesData.forEach((vehicle) => {
                const vehicleCard = document.createElement('div');
                vehicleCard.className = 'vehicle-card';
                vehicleCard.innerHTML = `
                    <button class="edit-vehicle-btn" data-id="${vehicle.id}">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                        </svg>
                    </button>
                    <h4>${vehicle.marca} ${vehicle.modelo}</h4>
                    <div class="vehicle-info">
                        <p><strong>Placa:</strong> ${vehicle.placa}</p>
                        <p><strong>Tipo:</strong> ${vehicle.tipo}</p>
                        <p><strong>Cor:</strong> ${vehicle.cor}</p>
                    </div>
                `;
                vehiclesList.appendChild(vehicleCard);
            });

            document.querySelectorAll('.edit-vehicle-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    
                    const vehicleId = e.currentTarget.dataset.id;
                    const vehicleData = vehiclesData.find(v => v.id.toString() === vehicleId); // Use vehiclesData here
                    if (vehicleData) {
                        openEditVehicleModal(vehicleData);
                    } else {
                        console.error('Vehicle data not found for ID:', vehicleId, 'in', vehiclesData); // Corrected variable name
                    }
                });
            });
        }

        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'block';
            } else {
                console.error('Modal with ID not found:', modalId);
            }
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        function openEditProfileModal() {
            const editPhone = document.getElementById('editPhone');
            // Nome and Email are now static, but if you pre-fill phone, do it here
            editPhone.value = document.getElementById('userPhone').textContent; // Or current_user.telefone if directly available
            // Ensure static fields are also up-to-date if this modal can be opened multiple times
            document.getElementById('staticName').textContent = document.getElementById('userName').textContent;
            document.getElementById('staticEmail').textContent = document.getElementById('userEmail').textContent;

            openModal('editProfileModal');
        }

        function openEditVehicleModal(vehicle) {
            document.getElementById('editVehicleId').value = vehicle.id;
            document.getElementById('editPlaca').value = vehicle.placa;
            document.getElementById('editMarca').value = vehicle.marca;
            document.getElementById('editModelo').value = vehicle.modelo;
            document.getElementById('editTipo').value = vehicle.tipo;
            document.getElementById('editCor').value = vehicle.cor;

            openModal('editVehicleModal');
        }

        // Sidebar functionality
        document.addEventListener('DOMContentLoaded', () => {
            // This vehiclesDataFromServer is correctly scoped for use when calling createVehicleCards
            const vehiclesDataFromServer = <%= @carros.to_json.html_safe rescue [].to_json %>;
            console.log("Initial vehiclesDataFromServer:", vehiclesDataFromServer);

            const profileLink = document.getElementById('profileLink');
            const sidebar = document.getElementById('sidebar');
            const closeSidebar = document.getElementById('closeSidebar');
            const logoutBtn = document.getElementById('logoutBtn');
            const editProfileBtn = document.querySelector('.edit-profile-btn');

            // Create vehicle cards when the page loads
            createVehicleCards(vehiclesDataFromServer);

            // Show sidebar
            profileLink.addEventListener('click', (e) => {
                e.preventDefault();
                sidebar.classList.add('visible');
            });

            // Hide sidebar
            closeSidebar.addEventListener('click', () => {
                sidebar.classList.remove('visible');
            });

            // Close sidebar when clicking outside
            document.addEventListener('click', (e) => {
                if (!sidebar.contains(e.target) && !profileLink.contains(e.target) && sidebar.classList.contains('visible')) {
                    sidebar.classList.remove('visible');
                }
            });

            // Edit profile button
            editProfileBtn.addEventListener('click', openEditProfileModal);

            // Close modals
            document.querySelectorAll('.modal-close').forEach(btn => {
                btn.addEventListener('click', () => {
                    closeModal('editProfileModal');
                    closeModal('editVehicleModal');
                });
            });

            // Handle profile edit form submission
            document.getElementById('editProfileForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const phone = document.getElementById('editPhone').value;
                const csrfToken = document.querySelector("[name='csrf-token']")?.content;

                try {
                    const response = await fetch('<%= profile_path %>', {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({ client: { telefone: phone } })
                    });
                    const result = await response.json();

                    if (response.ok && result.status === 'ok') {
                        // Update the profile information in the sidebar
                        document.getElementById('userPhone').textContent = result.user.telefone;
                        closeModal('editProfileModal');
                        alert(result.message || 'Perfil atualizado com sucesso!');
                    } else {
                        alert('Erro ao atualizar perfil: ' + (result.errors ? result.errors.join(', ') : 'Erro desconhecido'));
                    }
                } catch (error) {
                    console.error("Error updating profile:", error);
                    alert('Ocorreu um erro ao tentar atualizar o perfil.');
                }
            });

            // Handle vehicle edit form submission
            document.getElementById('editVehicleForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const vehicleId = document.getElementById('editVehicleId').value;
                const csrfToken = document.querySelector("[name='csrf-token']")?.content;

                const formData = {
                    carro: {
                        placa: document.getElementById('editPlaca').value,
                        marca: document.getElementById('editMarca').value,
                        modelo: document.getElementById('editModelo').value,
                        tipo: document.getElementById('editTipo').value,
                        cor: document.getElementById('editCor').value
                    }
                };

                try {
                    const response = await fetch(`/cars/${vehicleId}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrfToken
                        },
                        body: JSON.stringify(formData)
                    });

                    console.log("Edit Vehicle Response Status:", response.status); // Log HTTP status
                    console.log("Edit Vehicle Response OK?:", response.ok); // Log response.ok

                    const result = await response.json();
                    console.log("Edit Vehicle Result JSON:", result);

                    if (response.ok && result && result.status === 'ok') {
                        console.log("Condition (response.ok && result && result.status === 'ok') is TRUE");
                        const updatedCar = result.carro;
                        if (!updatedCar) {
                            console.error("result.carro is missing in the response!", result);
                            alert('Erro ao processar dados do veículo atualizado.');
                            return;
                        }
                        console.log("Updated car data from server (result.carro):", updatedCar);

                        const carIndex = vehiclesDataFromServer.findIndex(v => v.id === updatedCar.id);
                        console.log("Index found in vehiclesDataFromServer:", carIndex);

                        if (carIndex > -1) {
                            vehiclesDataFromServer[carIndex] = updatedCar;
                            console.log("vehiclesDataFromServer updated at index:", carIndex, vehiclesDataFromServer[carIndex]);
                        } else {
                            console.warn("Car not found in client-side list for update, id:", updatedCar.id);
                            // Optionally, add it if not found, or refresh full list from server
                        }
                        createVehicleCards(vehiclesDataFromServer); // Re-render cards

                        closeModal('editVehicleModal');
                        alert(result.message || 'Veículo atualizado com sucesso!');
                    } else {
                        console.log("Condition (response.ok && result && result.status === 'ok') is FALSE");
                        console.log("Details: response.ok:", response.ok, ", result:", result, ", result.status:", result ? result.status : 'N/A');
                        alert('Erro ao atualizar veículo: ' + (result && result.errors ? result.errors.join(', ') : (result && result.message ? result.message : 'Resposta inesperada do servidor.')));
                    }
                } catch (error) {
                    console.error("Error updating vehicle (in catch block):", error);
                    alert('Ocorreu um erro ao tentar atualizar o veículo.');
                }
            });

            // Logout functionality
            logoutBtn.addEventListener('click', () => {
                if (confirm('Deseja realmente sair?')) {
                    alert('Logout realizado com sucesso!');
                    window.location.href = 'register.html';
                }
            });
        });
    </script>

    <!--<script>
            // Adiciona animação suave ao scroll
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Adiciona efeito de hover nos cards de serviço
        document.querySelectorAll('.service-card').forEach(card => {
            card.addEventListener('mouseenter', () => {
                card.style.transform = 'scale(1.05)';
            });

            card.addEventListener('mouseleave', () => {
                card.style.transform = 'scale(1)';
            });
        });

        // Adiciona funcionalidade aos botões de agendamento
        document.querySelectorAll('.btn').forEach(button => {
            button.addEventListener('click', () => {
                alert('Sistema de agendamento em desenvolvimento. Por favor, entre em contato por telefone.');
            });
        });

                // Mostra e esconde a sidebar de perfil
        const profileLink = document.getElementById('profileLink');
        const sidebar = document.getElementById('sidebar');
        const closeSidebar = document.getElementById('closeSidebar');

        profileLink.addEventListener('click', (e) => {
            e.preventDefault();
            sidebar.classList.add('visible');
        });

        closeSidebar.addEventListener('click', () => {
            sidebar.classList.remove('visible');
        });
    </script> -->
</body>
</html>